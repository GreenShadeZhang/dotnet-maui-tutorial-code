using MauiApp1.Services;
using Microsoft.Extensions.Logging;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using System.Windows.Input;

namespace MauiApp1.ViewModels;

public class DebugPageViewModel : INotifyPropertyChanged
{
    private readonly IRobotControlService _robotService;
    private readonly ILogger<DebugPageViewModel> _logger;
    private readonly ObservableCollection<string> _logMessages = new();
    private bool _isConnected;
    private bool _isTesting;

    public DebugPageViewModel(IRobotControlService robotService, ILogger<DebugPageViewModel> logger)
    {
        _robotService = robotService;
        _logger = logger;
        
        // ÂàùÂßãÂåñÂëΩ‰ª§
        TestForwardActionsCommand = new Command(async () => await TestForwardActionsAsync(), () => IsConnected && !IsTesting);
        TestParameterCombinationsCommand = new Command(async () => await TestParameterCombinationsAsync(), () => IsConnected && !IsTesting);
        TestSingleActionCommand = new Command<string>(async (actionNumber) => await TestSingleActionAsync(actionNumber), (actionNumber) => IsConnected && !IsTesting);
        ClearLogCommand = new Command(() => _logMessages.Clear());
        InitializeRobotCommand = new Command(async () => await InitializeRobotAsync(), () => !IsConnected);
        
        AddLogMessage("üîß Ë∞ÉËØïÈ°µÈù¢Â∑≤Âä†ËΩΩ");
    }

    #region Â±ûÊÄß
    public ObservableCollection<string> LogMessages => _logMessages;

    public bool IsConnected
    {
        get => _isConnected;
        set
        {
            _isConnected = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(ConnectionStatusText));
            OnPropertyChanged(nameof(ConnectionStatusColor));
            ((Command)TestForwardActionsCommand).ChangeCanExecute();
            ((Command)TestParameterCombinationsCommand).ChangeCanExecute();
            ((Command)InitializeRobotCommand).ChangeCanExecute();
        }
    }

    public bool IsTesting
    {
        get => _isTesting;
        set
        {
            _isTesting = value;
            OnPropertyChanged();
            OnPropertyChanged(nameof(TestingStatusText));
            OnPropertyChanged(nameof(TestingStatusColor));
            ((Command)TestForwardActionsCommand).ChangeCanExecute();
            ((Command)TestParameterCombinationsCommand).ChangeCanExecute();
        }
    }

    public string ConnectionStatusText => IsConnected ? "‚úÖ Â∑≤ËøûÊé•" : "‚ùå Êú™ËøûÊé•";
    public Color ConnectionStatusColor => IsConnected ? Colors.Green : Colors.Red;
    
    public string TestingStatusText => IsTesting ? "üß™ ÊµãËØï‰∏≠..." : "‚è∏Ô∏è Â∞±Áª™";
    public Color TestingStatusColor => IsTesting ? Colors.Orange : Colors.Gray;
    #endregion

    #region ÂëΩ‰ª§
    public ICommand TestForwardActionsCommand { get; }
    public ICommand TestParameterCombinationsCommand { get; }
    public ICommand TestSingleActionCommand { get; }
    public ICommand ClearLogCommand { get; }
    public ICommand InitializeRobotCommand { get; }
    #endregion

    #region ÊñπÊ≥ï
    private async Task InitializeRobotAsync()
    {
        try
        {
            AddLogMessage("üîÑ ÂàùÂßãÂåñÊú∫Âô®‰∫∫ÊúçÂä°...");
            var result = await _robotService.InitializeAsync();
            
            if (result)
            {
                IsConnected = true;
                AddLogMessage("‚úÖ Êú∫Âô®‰∫∫ÊúçÂä°ÂàùÂßãÂåñÊàêÂäü");
            }
            else
            {
                AddLogMessage("‚ùå Êú∫Âô®‰∫∫ÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•");
            }
        }
        catch (Exception ex)
        {
            AddLogMessage($"‚ùå ÂàùÂßãÂåñÈîôËØØ: {ex.Message}");
        }
    }

    private async Task TestForwardActionsAsync()
    {
        IsTesting = true;
        try
        {
            AddLogMessage("üß™ ÂºÄÂßãÊµãËØïÂ§öÁßçÂâçËøõÂä®‰ΩúÁºñÂè∑...");
            await _robotService.DebugTestForwardActionsAsync();
            AddLogMessage("‚úÖ ÂâçËøõÂä®‰ΩúÊµãËØïÂÆåÊàê");
        }
        catch (Exception ex)
        {
            AddLogMessage($"‚ùå ÊµãËØïÈîôËØØ: {ex.Message}");
        }
        finally
        {
            IsTesting = false;
        }
    }

    private async Task TestParameterCombinationsAsync()
    {
        IsTesting = true;
        try
        {
            AddLogMessage("üß™ ÂºÄÂßãÊµãËØïÂèÇÊï∞ÁªÑÂêà...");
            await _robotService.DebugTestParameterCombinationsAsync();
            AddLogMessage("‚úÖ ÂèÇÊï∞ÁªÑÂêàÊµãËØïÂÆåÊàê");
        }
        catch (Exception ex)
        {
            AddLogMessage($"‚ùå ÊµãËØïÈîôËØØ: {ex.Message}");
        }
        finally
        {
            IsTesting = false;
        }
    }

    private async Task TestSingleActionAsync(string actionNumberStr)
    {
        if (!int.TryParse(actionNumberStr, out int actionNumber))
        {
            AddLogMessage($"‚ùå Êó†ÊïàÁöÑÂä®‰ΩúÁºñÂè∑: {actionNumberStr}");
            return;
        }

        IsTesting = true;
        try
        {
            AddLogMessage($"üß™ ÊµãËØïÂçï‰∏™Âä®‰ΩúÁºñÂè∑: {actionNumber}");
            await _robotService.PerformActionAsync(actionNumber, 50, 1);
            AddLogMessage($"‚úÖ Âä®‰Ωú {actionNumber} ÊµãËØïÂÆåÊàê");
        }
        catch (Exception ex)
        {
            AddLogMessage($"‚ùå ÊµãËØïÈîôËØØ: {ex.Message}");
        }
        finally
        {
            IsTesting = false;
        }
    }

    private async Task TestSpecificParameterOrderAsync()
    {
        IsTesting = true;
        try
        {
            AddLogMessage("üîç Á°ÆËÆ§ÂÖ∑‰ΩìÊúâÊïàÁöÑÂèÇÊï∞ÁªÑÂêà...");
            
            // Â¶ÇÊûúÊÇ®Â∑≤ÁªèÁü•ÈÅìÂì™‰∏™ÁªÑÂêàÊúâÊïàÔºåËØ∑ÂëäËØâÊàë
            // ËøôÈáåÊàëÂÖàÊµãËØïÊúÄÂèØËÉΩÁöÑÁªÑÂêà2: Set(speed, steps, actionNumber)
            AddLogMessage("ÊµãËØïÁªÑÂêà2: Set(50, 1, 63) - speed, steps, actionNumber");
            await _robotService.DebugTestParameterCombinationsAsync();
            
            AddLogMessage("‚úÖ ËØ∑ËßÇÂØüÊú∫Âô®‰∫∫ÂèçÂ∫îÂπ∂ËÆ∞ÂΩïÂì™‰∏™ÁªÑÂêàÊúâÊïà");
        }
        catch (Exception ex)
        {
            AddLogMessage($"‚ùå ÊµãËØïÈîôËØØ: {ex.Message}");
        }
        finally
        {
            IsTesting = false;
        }
    }

    private void AddLogMessage(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        _logMessages.Insert(0, $"[{timestamp}] {message}");
        
        // ÈôêÂà∂Êó•ÂøóÊù°Êï∞
        while (_logMessages.Count > 50)
        {
            _logMessages.RemoveAt(_logMessages.Count - 1);
        }
    }
    #endregion

    #region INotifyPropertyChanged
    public event PropertyChangedEventHandler? PropertyChanged;

    protected virtual void OnPropertyChanged([CallerMemberName] string? propertyName = null)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
    #endregion
}
